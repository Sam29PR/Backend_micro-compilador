
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'CAPTURE COMMA DIVIDE ENDIF ENDLINE EQUALS IF LOG_OP LPAREN MINUS NUMBER PLUS REL_OP RPAREN STRING THEN TIMES VARIABLE WRITEprogram : statement_liststatement_list : statement ENDLINE statement_list\n                      | statement ENDLINEstatement : statement_write\n                 | statement_assign\n                 | statement_capture\n                 | statement_ifstatement_write : WRITE LPAREN STRING COMMA VARIABLE RPARENstatement_assign : VARIABLE EQUALS expressionstatement_capture : CAPTURE LPAREN VARIABLE RPARENstatement_if : IF LPAREN condition RPAREN THEN statement_list ENDIFexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : NUMBERexpression : VARIABLEcondition : expression REL_OP expression\n                 | condition LOG_OP condition'
    
_lr_action_items = {'WRITE':([0,12,39,],[8,8,8,]),'VARIABLE':([0,12,14,15,16,25,26,27,28,29,32,33,39,],[9,9,19,22,19,34,19,19,19,19,19,19,9,]),'CAPTURE':([0,12,39,],[10,10,10,]),'IF':([0,12,39,],[11,11,11,]),'$end':([1,2,12,17,],[0,-1,-3,-2,]),'ENDLINE':([3,4,5,6,7,19,20,21,30,35,36,37,38,42,44,],[12,-4,-5,-6,-7,-17,-9,-16,-10,-12,-13,-14,-15,-8,-11,]),'LPAREN':([8,10,11,],[13,15,16,]),'EQUALS':([9,],[14,]),'ENDIF':([12,17,43,],[-3,-2,44,]),'STRING':([13,],[18,]),'NUMBER':([14,16,26,27,28,29,32,33,],[21,21,21,21,21,21,21,21,]),'COMMA':([18,],[25,]),'PLUS':([19,20,21,24,35,36,37,38,41,],[-17,26,-16,26,26,26,26,26,26,]),'MINUS':([19,20,21,24,35,36,37,38,41,],[-17,27,-16,27,27,27,27,27,27,]),'TIMES':([19,20,21,24,35,36,37,38,41,],[-17,28,-16,28,28,28,28,28,28,]),'DIVIDE':([19,20,21,24,35,36,37,38,41,],[-17,29,-16,29,29,29,29,29,29,]),'REL_OP':([19,21,24,35,36,37,38,],[-17,-16,33,-12,-13,-14,-15,]),'RPAREN':([19,21,22,23,34,35,36,37,38,40,41,],[-17,-16,30,31,42,-12,-13,-14,-15,-19,-18,]),'LOG_OP':([19,21,23,35,36,37,38,40,41,],[-17,-16,32,-12,-13,-14,-15,32,-18,]),'THEN':([31,],[39,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,12,39,],[2,17,43,]),'statement':([0,12,39,],[3,3,3,]),'statement_write':([0,12,39,],[4,4,4,]),'statement_assign':([0,12,39,],[5,5,5,]),'statement_capture':([0,12,39,],[6,6,6,]),'statement_if':([0,12,39,],[7,7,7,]),'expression':([14,16,26,27,28,29,32,33,],[20,24,35,36,37,38,24,41,]),'condition':([16,32,],[23,40,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement ENDLINE statement_list','statement_list',3,'p_statement_list','parser.py',13),
  ('statement_list -> statement ENDLINE','statement_list',2,'p_statement_list','parser.py',14),
  ('statement -> statement_write','statement',1,'p_statement','parser.py',22),
  ('statement -> statement_assign','statement',1,'p_statement','parser.py',23),
  ('statement -> statement_capture','statement',1,'p_statement','parser.py',24),
  ('statement -> statement_if','statement',1,'p_statement','parser.py',25),
  ('statement_write -> WRITE LPAREN STRING COMMA VARIABLE RPAREN','statement_write',6,'p_statement_write','parser.py',30),
  ('statement_assign -> VARIABLE EQUALS expression','statement_assign',3,'p_statement_assign','parser.py',35),
  ('statement_capture -> CAPTURE LPAREN VARIABLE RPAREN','statement_capture',4,'p_statement_capture','parser.py',40),
  ('statement_if -> IF LPAREN condition RPAREN THEN statement_list ENDIF','statement_if',7,'p_statement_if','parser.py',45),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',50),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',51),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',52),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',53),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',57),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','parser.py',61),
  ('condition -> expression REL_OP expression','condition',3,'p_condition','parser.py',66),
  ('condition -> condition LOG_OP condition','condition',3,'p_condition','parser.py',67),
]
